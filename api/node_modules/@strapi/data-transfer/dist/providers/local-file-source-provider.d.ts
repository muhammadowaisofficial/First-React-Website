/// <reference types="lodash" />
/// <reference types="node" />
import type { IMetadata, ISourceProvider, ProviderType } from '../../types';
/**
 * Provider options
 */
export interface ILocalFileSourceProviderOptions {
    /**
     * Path to the backup archive
     */
    backupFilePath: string;
    /**
     * Whether the backup data is encrypted or not
     */
    encrypted?: boolean;
    /**
     * Encryption key used to decrypt the encrypted data (if necessary)
     */
    encryptionKey?: string;
    /**
     * Whether the backup data is compressed or not
     */
    compressed?: boolean;
}
export declare const createLocalFileSourceProvider: (options: ILocalFileSourceProviderOptions) => LocalFileSourceProvider;
declare class LocalFileSourceProvider implements ISourceProvider {
    #private;
    type: ProviderType;
    name: string;
    options: ILocalFileSourceProviderOptions;
    constructor(options: ILocalFileSourceProviderOptions);
    /**
     * Pre flight checks regarding the provided options (making sure that the provided path is correct, etc...)
     */
    bootstrap(): void;
    getMetadata(): Promise<IMetadata>;
    getSchemas(): Promise<import("lodash").Dictionary<unknown>>;
    streamEntities(): NodeJS.ReadableStream;
    streamSchemas(): NodeJS.ReadableStream | Promise<NodeJS.ReadableStream>;
    streamLinks(): NodeJS.ReadableStream;
    streamConfiguration(): NodeJS.ReadableStream;
}
export {};
