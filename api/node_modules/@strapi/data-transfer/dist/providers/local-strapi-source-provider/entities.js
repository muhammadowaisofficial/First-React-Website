"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createEntitiesTransformStream = exports.createEntitiesStream = void 0;
const stream_1 = require("stream");
/**
 * Generate and consume content-types streams in order to stream each entity individually
 */
const createEntitiesStream = (strapi) => {
    const contentTypes = Object.values(strapi.contentTypes);
    async function* contentTypeStreamGenerator() {
        for (const contentType of contentTypes) {
            const stream = strapi.db
                // Create a query builder instance (default type is 'select')
                .queryBuilder(contentType.uid)
                // Apply the populate
                .populate(getPopulateAttributes(contentType))
                // Get a readable stream
                .stream();
            yield { contentType, stream };
        }
    }
    return stream_1.Readable.from((async function* () {
        for await (const { stream, contentType } of contentTypeStreamGenerator()) {
            for await (const entity of stream) {
                yield { entity, contentType };
            }
            stream.destroy();
        }
    })());
};
exports.createEntitiesStream = createEntitiesStream;
/**
 * Create an entity transform stream which convert the output of
 * the multi-content-types stream to the transfer entity format
 */
const createEntitiesTransformStream = () => {
    return new stream_1.PassThrough({
        objectMode: true,
        transform(data, _encoding, callback) {
            const { entity, contentType } = data;
            const { id, ...attributes } = entity;
            callback(null, {
                type: contentType.uid,
                id,
                data: attributes,
            });
        },
    });
};
exports.createEntitiesTransformStream = createEntitiesTransformStream;
/**
 * Get the list of attributes that needs to be populated for the entities streaming
 */
const getPopulateAttributes = (contentType) => {
    const { attributes } = contentType;
    return Object.keys(attributes).filter((key) => ['component', 'dynamiczone'].includes(attributes[key].type));
};
//# sourceMappingURL=entities.js.map