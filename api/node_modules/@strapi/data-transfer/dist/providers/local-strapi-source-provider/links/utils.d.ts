import type { RelationsType } from '@strapi/strapi';
import type { ILink } from '../../../../types';
/**
 * Parse every links from an entity result (including nested components and dynamic zone levels)
 */
export declare const parseEntityLinks: (entity: any, populate: any, schema: any, strapi: any) => any[];
/**
 * Parse links contained in a relational attribute
 */
export declare const parseRelationLinks: ({ entity, schema, fieldName, value }: any) => ILink[];
/**
 * Get a deep populate query for a given schema
 * It will populate first level for relations and media as well as
 * first-level relations for nested components and dynamic zones' components
 */
export declare const getDeepPopulateQuery: (schema: any, strapi: any) => {
    [key: string]: any;
};
/**
 * Domain util to create a link
 * TODO: Move that to the domain layer when we'll update it
 */
export declare const linkBuilder: <T extends ILink = ILink>(kind: T["kind"], relation: RelationsType) => {
    left(type: string, ref: string | number, field: string, pos?: number | undefined): any;
    right(type: string, ref: string | number, field?: string | undefined): any;
    readonly value: ILink | null;
};
