"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLocalStrapiSourceProvider = void 0;
const stream_chain_1 = require("stream-chain");
const stream_1 = require("stream");
const entities_1 = require("./entities");
const links_1 = require("./links");
const configuration_1 = require("./configuration");
const utils_1 = require("../../utils");
const createLocalStrapiSourceProvider = (options) => {
    return new LocalStrapiSourceProvider(options);
};
exports.createLocalStrapiSourceProvider = createLocalStrapiSourceProvider;
class LocalStrapiSourceProvider {
    constructor(options) {
        this.name = 'source::local-strapi';
        this.type = 'source';
        this.options = options;
    }
    async bootstrap() {
        this.strapi = await this.options.getStrapi();
    }
    async close() {
        const { autoDestroy } = this.options;
        // Basically `!== false` but more deterministic
        if (autoDestroy === undefined || autoDestroy === true) {
            await this.strapi?.destroy();
        }
    }
    getMetadata() {
        const strapiVersion = strapi.config.get('info.strapi');
        const createdAt = new Date().toISOString();
        const plugins = Object.keys(strapi.plugins);
        return {
            createdAt,
            strapi: {
                version: strapiVersion,
                plugins: plugins.map((name) => ({
                    name,
                    // TODO: Get the plugin actual version when it'll be available
                    version: strapiVersion,
                })),
            },
        };
    }
    async streamEntities() {
        if (!this.strapi) {
            throw new Error('Not able to stream entities. Strapi instance not found');
        }
        return (0, stream_chain_1.chain)([
            // Entities stream
            (0, entities_1.createEntitiesStream)(this.strapi),
            // Transform stream
            (0, entities_1.createEntitiesTransformStream)(),
        ]);
    }
    streamLinks() {
        if (!this.strapi) {
            throw new Error('Not able to stream links. Strapi instance not found');
        }
        return (0, links_1.createLinksStream)(this.strapi);
    }
    streamConfiguration() {
        if (!this.strapi) {
            throw new Error('Not able to stream configuration. Strapi instance not found');
        }
        return (0, configuration_1.createConfigurationStream)(strapi);
    }
    getSchemas() {
        if (!this.strapi) {
            throw new Error('Not able to get Schemas. Strapi instance not found');
        }
        const schemas = {
            ...this.strapi.contentTypes,
            ...this.strapi.components,
        };
        return (0, utils_1.mapSchemasValues)(schemas);
    }
    streamSchemas() {
        return stream_1.Readable.from(Object.values(this.getSchemas()));
    }
}
//# sourceMappingURL=index.js.map