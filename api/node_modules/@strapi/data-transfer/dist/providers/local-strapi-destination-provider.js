"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLocalStrapiDestinationProvider = void 0;
const chalk_1 = __importDefault(require("chalk"));
const stream_1 = require("stream");
const utils_1 = require("../utils");
// TODO: getting some type errors with @strapi/logger that need to be resolved first
// const log = createLogger();
const log = console;
const createLocalStrapiDestinationProvider = (options) => {
    return new LocalStrapiDestinationProvider(options);
};
exports.createLocalStrapiDestinationProvider = createLocalStrapiDestinationProvider;
class LocalStrapiDestinationProvider {
    constructor(options) {
        this.name = 'destination::local-strapi';
        this.type = 'destination';
        this.options = options;
    }
    async bootstrap() {
        this.strapi = await this.options.getStrapi();
    }
    async close() {
        await this.strapi?.destroy?.();
    }
    // TODO
    getMetadata() {
        return {};
    }
    getSchemas() {
        if (!this.strapi) {
            throw new Error('Not able to get Schemas. Strapi instance not found');
        }
        const schemas = {
            ...this.strapi.contentTypes,
            ...this.strapi.components,
        };
        return (0, utils_1.mapSchemasValues)(schemas);
    }
    getEntitiesStream() {
        const self = this;
        return new stream_1.Duplex({
            objectMode: true,
            async write(entity, _encoding, callback) {
                if (!self.strapi) {
                    callback(new Error('Strapi instance not found'));
                }
                const { type: uid, id, data } = entity;
                try {
                    await strapi.entityService.create(uid, { data });
                }
                catch (e) {
                    // TODO: remove "any" cast
                    log.warn(chalk_1.default.bold(`Failed to import ${chalk_1.default.yellowBright(uid)} (${chalk_1.default.greenBright(id)})`));
                    e.details.errors
                        .map((err, i) => {
                        // TODO: add correct error type
                        const info = {
                            uid: chalk_1.default.yellowBright(`[${uid}]`),
                            path: chalk_1.default.blueBright(`[${err.path.join('.')}]`),
                            id: chalk_1.default.greenBright(`[${id}]`),
                            message: err.message,
                        };
                        return `(${i}) ${info.uid}${info.id}${info.path}: ${info.message}`;
                    })
                        .forEach((message) => log.warn(message));
                }
                finally {
                    callback();
                }
            },
        });
    }
}
//# sourceMappingURL=local-strapi-destination-provider.js.map