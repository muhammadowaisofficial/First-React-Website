/// <reference types="node" />
import { PassThrough } from 'stream-chain';
import type { IDestinationProvider, ISourceProvider, ITransferEngine, ITransferEngineOptions, ITransferResults } from '../../types';
declare type TransferEngineProgress = {
    data: any;
    stream: PassThrough;
};
export declare const VALID_STRATEGIES: string[];
declare class TransferEngine<S extends ISourceProvider = ISourceProvider, D extends IDestinationProvider = IDestinationProvider> implements ITransferEngine {
    #private;
    sourceProvider: ISourceProvider;
    destinationProvider: IDestinationProvider;
    options: ITransferEngineOptions;
    get progress(): TransferEngineProgress;
    constructor(sourceProvider: ISourceProvider, destinationProvider: IDestinationProvider, options: ITransferEngineOptions);
    init(): Promise<void>;
    bootstrap(): Promise<void>;
    close(): Promise<void>;
    integrityCheck(): Promise<boolean>;
    validateTransferOptions(): void;
    transfer(): Promise<ITransferResults<S, D>>;
    transferSchemas(): Promise<void>;
    transferEntities(): Promise<void>;
    transferLinks(): Promise<void>;
    transferMedia(): Promise<void>;
    transferConfiguration(): Promise<void>;
}
export declare const createTransferEngine: <S extends ISourceProvider = ISourceProvider, D extends IDestinationProvider = IDestinationProvider>(sourceProvider: S, destinationProvider: D, options: ITransferEngineOptions) => TransferEngine<S, D>;
export {};
